[
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "dataclass",
        "importPath": "dataclasses",
        "description": "dataclasses",
        "isExtraImport": true,
        "detail": "dataclasses",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "CoolProp.CoolProp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "CoolProp.CoolProp",
        "description": "CoolProp.CoolProp",
        "detail": "CoolProp.CoolProp",
        "documentation": {}
    },
    {
        "label": "CEAInputData",
        "kind": 6,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "class CEAInputData:\n    pcham = None\n    pamb = None\n    of = None\n    fuel_chems = None\n    fuel_chem_mass_percs = None\n    fuel_initial_temp = None\n    ox_chem = None\n    ox_initial_temp = None\n    equilibrium = None",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "CEAOutputData",
        "kind": 6,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "class CEAOutputData:\n    chamber_temp: float = 0\n    exhaust_gamma: float = 0\n    exhaust_molar_mass: float = 0\n    cstar: float = 0\n    exhaust_velocity: float = 0\ndef parse_out_file() -> CEAOutputData:\n    '''parses the ceadata.out file. returns a dictionary of design parameters that resulted from running CEA'''\n    r = CEAOutputData()\n    with open(CEA_OUT, 'r') as f:",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "create_inp_file",
        "kind": 2,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "def create_inp_file(inp: CEAInputData):\n    '''creates a .inp file for CEA based on the design parameters in data.'''\n    with open(CEA_INP, mode='w') as f:\n        f.write('problem\\n')\n        f.write('rocket\\n')\n        eqbr_arg = 'equilibrium' if inp.equilibrium else 'frozen nfz=1'\n        # equilibrium assumes rxns stay at equilibrium (inf. rxn rates) throughout nozzle flow\n        # allowing rxns to absorb energy from flow. slightly underestimates engine performance\n        # frozen nfz=1 assumes all equilbria fix at the nozzle throat. overestimates performance\n        f.write(f'{eqbr_arg}\\n')",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "run_executable",
        "kind": 2,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "def run_executable() -> str:\n    '''runs the FCEA2m.exe executable on ceadata.inp. returns the full path to the output file'''\n    # FCEA2m.exe is *special*\n    # it takes no cmd line arguments, but when you run it it expects you to type something in\n    # namely, the name of the input file, without the .inp ext.\n    # this method will make the program crash if there are any issues running the command line\n    subprocess.run([CEA_EXE], input=f'ceadata\\n', cwd=CEA_PATH,\n                   check=True, shell=True,  stdout=subprocess.DEVNULL,\n                   encoding='ascii')\n@dataclass",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "parse_out_file",
        "kind": 2,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "def parse_out_file() -> CEAOutputData:\n    '''parses the ceadata.out file. returns a dictionary of design parameters that resulted from running CEA'''\n    r = CEAOutputData()\n    with open(CEA_OUT, 'r') as f:\n        relevant_flag = False  # True when we're in the section of the outfile with numbers\n        for line in f.readlines():\n            if relevant_flag:\n                if 'T, K' in line:\n                    r.chamber_temp = float(\n                        line.split()[2])  # [K]",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "CEA_PATH",
        "kind": 5,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "CEA_PATH = pathlib.Path(__file__).parent / 'CEA'\nCEA_EXE = CEA_PATH / 'FCEA2m.exe'\nCEA_INP = CEA_PATH / 'ceadata.inp'\nCEA_OUT = CEA_PATH / 'ceadata.out'\n@dataclass\nclass CEAInputData:\n    pcham = None\n    pamb = None\n    of = None\n    fuel_chems = None",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "CEA_EXE",
        "kind": 5,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "CEA_EXE = CEA_PATH / 'FCEA2m.exe'\nCEA_INP = CEA_PATH / 'ceadata.inp'\nCEA_OUT = CEA_PATH / 'ceadata.out'\n@dataclass\nclass CEAInputData:\n    pcham = None\n    pamb = None\n    of = None\n    fuel_chems = None\n    fuel_chem_mass_percs = None",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "CEA_INP",
        "kind": 5,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "CEA_INP = CEA_PATH / 'ceadata.inp'\nCEA_OUT = CEA_PATH / 'ceadata.out'\n@dataclass\nclass CEAInputData:\n    pcham = None\n    pamb = None\n    of = None\n    fuel_chems = None\n    fuel_chem_mass_percs = None\n    fuel_initial_temp = None",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "CEA_OUT",
        "kind": 5,
        "importPath": "lib.cea",
        "description": "lib.cea",
        "peekOfCode": "CEA_OUT = CEA_PATH / 'ceadata.out'\n@dataclass\nclass CEAInputData:\n    pcham = None\n    pamb = None\n    of = None\n    fuel_chems = None\n    fuel_chem_mass_percs = None\n    fuel_initial_temp = None\n    ox_chem = None",
        "detail": "lib.cea",
        "documentation": {}
    },
    {
        "label": "exhaust_velocity",
        "kind": 2,
        "importPath": "lib.nozzle",
        "description": "lib.nozzle",
        "peekOfCode": "def exhaust_velocity(exhaust_gamma, exhaust_molar_mass, chamber_temp, chamber_pressure,\n                     ambient_pressure):\n    '''returns exhaust velocity, assuming isentropic expansion of gases to ambient pressure at exit'''\n    k = exhaust_gamma\n    R = 8.314463e3 / exhaust_molar_mass\n    PR = ambient_pressure / chamber_pressure\n    exhaust_velocity = np.sqrt((2*k)/(k-1) * R * chamber_temp *\n                               (1 - PR ** ((k - 1) / k)))\n    return exhaust_velocity\ndef expansion_ratio(exhaust_gamma, chamber_pressure, ambient_pressure):",
        "detail": "lib.nozzle",
        "documentation": {}
    },
    {
        "label": "expansion_ratio",
        "kind": 2,
        "importPath": "lib.nozzle",
        "description": "lib.nozzle",
        "peekOfCode": "def expansion_ratio(exhaust_gamma, chamber_pressure, ambient_pressure):\n    '''returns optimum expansion ratio, assuming isentropic expansion of gases to ambient pressure at exit'''\n    k = exhaust_gamma\n    PR = ambient_pressure / chamber_pressure\n    expansion_ratio = 1 / ((((k+1)/2)**(1/(k-1))) * (PR**(1/k))\n                           * np.sqrt((k + 1) / (k-1) * (1 - PR ** ((k - 1) / k))))\n    return expansion_ratio\ndef throat_area(exhaust_gamma, exhaust_molar_mass, mass_flow, chamber_temp, chamber_pressure):\n    '''returns throat area required for choked flow to occur'''\n    k = exhaust_gamma",
        "detail": "lib.nozzle",
        "documentation": {}
    },
    {
        "label": "throat_area",
        "kind": 2,
        "importPath": "lib.nozzle",
        "description": "lib.nozzle",
        "peekOfCode": "def throat_area(exhaust_gamma, exhaust_molar_mass, mass_flow, chamber_temp, chamber_pressure):\n    '''returns throat area required for choked flow to occur'''\n    k = exhaust_gamma\n    R = 8.3144e3 / exhaust_molar_mass\n    throat_area = mass_flow / \\\n        (chamber_pressure*1e5 * k / np.sqrt(k*R*chamber_temp)\n         * (2 / (k + 1)) ** ((k + 1) / 2 / (k - 1)))\n    return throat_area\ndef cone_length(r1, r2, theta):\n    '''length of cone with top and bottom radii r1, r2 and half-angle theta'''",
        "detail": "lib.nozzle",
        "documentation": {}
    },
    {
        "label": "cone_length",
        "kind": 2,
        "importPath": "lib.nozzle",
        "description": "lib.nozzle",
        "peekOfCode": "def cone_length(r1, r2, theta):\n    '''length of cone with top and bottom radii r1, r2 and half-angle theta'''\n    return abs(r2-r1) / np.tan(np.radians(theta))\ndef chamber_length(Vch, Lcon, Ach, At):\n    '''length of cylindrical part of chamber, given total chamber volume (cylinder + conical converging section), \n    length of converging section, areas of chamber and throat'''\n    Vcon = Ach * Lcon * (1 + np.sqrt(At / Ach) + At / Ach)\n    return (Vch - Vcon) / Ach",
        "detail": "lib.nozzle",
        "documentation": {}
    },
    {
        "label": "chamber_length",
        "kind": 2,
        "importPath": "lib.nozzle",
        "description": "lib.nozzle",
        "peekOfCode": "def chamber_length(Vch, Lcon, Ach, At):\n    '''length of cylindrical part of chamber, given total chamber volume (cylinder + conical converging section), \n    length of converging section, areas of chamber and throat'''\n    Vcon = Ach * Lcon * (1 + np.sqrt(At / Ach) + At / Ach)\n    return (Vch - Vcon) / Ach",
        "detail": "lib.nozzle",
        "documentation": {}
    },
    {
        "label": "reynolds_number",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def reynolds_number(mdot, diameter, viscosity):\n    '''returns Reynolds number [~] for fluid flowing in circular pipe given:\n    mdot [kg/s], diameter [m], viscosity (dynamic) [kg/m/s]'''\n    area = math.pi * diameter**2 / 4\n    return mdot * diameter / viscosity / area\ndef darcy_friction_factor(mdot, roughness, diameter, reynolds):\n    '''returns Darcy friction factor [~] for fluid flowing in circular pipe given:\n    mdot [kg/s], diameter [m], roughness [m], Reynolds number [~]\n    uses Haaland approx. of Colebrook eqn. https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae'''\n    f = 1 / (-1.8*math.log10((roughness/diameter/3.7)**1.11 + 6.9/reynolds))**2",
        "detail": "lib.plumbing",
        "documentation": {}
    },
    {
        "label": "darcy_friction_factor",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def darcy_friction_factor(mdot, roughness, diameter, reynolds):\n    '''returns Darcy friction factor [~] for fluid flowing in circular pipe given:\n    mdot [kg/s], diameter [m], roughness [m], Reynolds number [~]\n    uses Haaland approx. of Colebrook eqn. https://en.wikipedia.org/wiki/Darcy_friction_factor_formulae'''\n    f = 1 / (-1.8*math.log10((roughness/diameter/3.7)**1.11 + 6.9/reynolds))**2\n    return f\ndef pressure_drop(length, mdot, diameter, roughness, rho, viscosity):\n    '''returns pressure drop [bar] as fluid flows through circular tubing, given:\n    length [m] of tubing\n    mdot [kg/s]",
        "detail": "lib.plumbing",
        "documentation": {}
    },
    {
        "label": "pressure_drop",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def pressure_drop(length, mdot, diameter, roughness, rho, viscosity):\n    '''returns pressure drop [bar] as fluid flows through circular tubing, given:\n    length [m] of tubing\n    mdot [kg/s]\n    diameter [m]\n    roughness [m]\n    rho [kg/m3]\n    viscosity [Pa-s]\n    uses Darcy equation to figure pressure drop per unit length.\n    https://en.wikipedia.org/wiki/Darcy%E2%80%93Weisbach_equation'''",
        "detail": "lib.plumbing",
        "documentation": {}
    },
    {
        "label": "velocity",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def velocity(mdot, diameter, rho):\n    '''returns velocity of flow in circular pipe [m/s] given:\n    mdot [kg/s]\n    diameter [m]\n    rho [kg/m3]'''\n    Vdot = mdot / rho\n    area = math.pi * diameter ** 2 / 4\n    vel = Vdot / area\n    return vel\ndef valve_flow_coefficient(Vdot, P_in, P_out, T, molar_mass):",
        "detail": "lib.plumbing",
        "documentation": {}
    },
    {
        "label": "valve_flow_coefficient",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def valve_flow_coefficient(Vdot, P_in, P_out, T, molar_mass):\n    '''returns min. Cv for a valve\n    based on http://www.idealvalve.com/pdf/Flow-Calculation-for-Gases.pdf'''\n    # the \"specific gravity\" they ask for is really just the ratio of molar masses\n    specific_gravity = molar_mass / cp.PropsSI('M', 'air')\n    Vdot_cfh = Vdot * 127133\n    T_Rankine = T * 1.8\n    P_out_psi = P_out * 14.504\n    # standard cfh is the amount of volume flow if we let the flow expand to 1atm, 70F\n    Vdot_standard_cfh = Vdot_cfh * P_out / 1.013 * 295 / T",
        "detail": "lib.plumbing",
        "documentation": {}
    },
    {
        "label": "calculate",
        "kind": 2,
        "importPath": "lib.plumbing",
        "description": "lib.plumbing",
        "peekOfCode": "def calculate(data: dict):\n    # find pressure drop in fuel lines\n    fuel_rho = data['propellants']['fuel_density']\n    fuel_visc = data['propellants']['fuel_viscosity']\n    roughness = data['plumbing']['roughness']\n    dp_fuel = pressure_drop(data['plumbing']['fuel_length'], data['engine']['fuel_mass_flow'],\n                            data['plumbing']['fuel_diam']*2.54e-2, roughness, fuel_rho, fuel_visc)\n    data['plumbing']['fuel_pressure_drop'] = dp_fuel\n    data['plumbing']['fuel_flow_vel'] = velocity(\n        data['engine']['fuel_mass_flow'], data['plumbing']['fuel_diam']*2.54e-2, fuel_rho)",
        "detail": "lib.plumbing",
        "documentation": {}
    }
]